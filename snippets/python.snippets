snippet #!
	#!/usr/bin/env python
snippet imp
	import ${1:module}
# Module Docstring
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet wh
	while ${1:condition}:
		${2:# code...}
snippet with
	with ${1:expr} as ${2:var}:
		${3:# code...}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}
# New Class
snippet cl
	class ${1:ClassName} (${2:object}):
		'''${3:docstring for $1}'''
		def __init__ (self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		'''${3:docstring for $1}'''
		${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		'''${3:docstring}'''
		${4:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet ldl
	[(lambda ${1:v}=$1: ${2:eval}) for $1 in ${3:list}]
snippet .
	self.
snippet if
	if ${1}:
		${2}
snippet elif:
	elif ${1}:
		${2}
snippet else
	else:
		${1}
snippet ife
	if ${1:cond}:
		${2}
	else:
		${3}
snippet iff
	if ${1:cond}:
		${2}
	elif ${3:cond}:
		${4}
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet main
	if __name__ == "__main__":
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}
# python debugger (pdb)
snippet pdb
	import pdb; pdb.set_trace()
# ipython debugger (ipdb)
snippet ipdb
	import ipdb; ipdb.set_trace()
# ipython debugger (pdbbb)
snippet pdbbb
	import pdbpp; pdbpp.set_trace()
# Getopt Function
snippet getopt
	def ${1:main} ():
		from getopt import getopt, GetoptError
		from sys import argv, exit

		try:
			opts, args = getopt(argv[1:], '${2:short}', [${3:long}])

		except GetoptError, ex:
			print str(ex)
			usage ()
			exit (2)
		${4}
snippet fork
	${1:cmd} = shlex.split('${2:args}')
	${3:var} = subprocess.Popen ($1, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0]
	${4}
snippet pin
	${1:cmd} = shlex.split('${2:args}')
	${3:p1} = subprocess.Popen (shlex.split($1}), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	${4}
snippet pout
	${1:cmd} = shlex.split('${2:args}')
	${3:p2} = subprocess.Popen(shlex.split($1), stdin=${4:p1}.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	${5}
snippet match
	${1} = re.match(${2:regex}, ${3:string})
	${4}
snippet search
	${1} = re.search(${2:regex}, ${3:string})
	${4}
snippet atoi
	try:
		${1:number} = int(${2:text})
	except exceptions.ValueError:
		$1 = int(float($2))
	${3}
snippet tmpfile
	${1} = tempfile.NamedTemporaryFile(${2:mode, bufsize, suffix, prefix, dir, delete})
	${3}
snippet email
	def ${1} (${2:text}):
		from smtplib import SMTP
		from email.mime.text import MIMEText

		msg = MIMEText($2)
		msg['Subject'] = ${3}
		msg['From'] = ${4}
		msg['To'] = ${5}

		s = SMTP('localhost')
		s.sendmail(msg['From'], [msg.['To']], msg.as_string())
		s.quit()
	${6}
snippet readline
	USING_READLINE = True
	try:
		# For platforms without readline support go visit ...
		# http://pypi.python.org/pypi/readline/
		import readline
	except:
		try:
			# For Windows readline support go visit ...
			# https://launchpad.net/pyreadline
			import pyreadline
		except:
			USING_READLINE = False
	${6}
snippet cmd
	class Interactive (Cmd):
		def __init__ (self, prompt = "#", intro = "This is a command-oriented program"):
			Cmd.__init__ (self)

			if not USING_READLINE:
				self.completekey = None

			self.prompt = prompt
			self.intro  = intro

		def default (self, line):
			cmd, arg, line = self.parseline (line)
			cmds = self.completenames (cmd)
			num_cmds = len(cmds)

			if num_cmds == 1:
				getattr (self, 'do_'+cmds[0]) (arg)
			elif num_cmds > 1:
				self.echo ('%% Ambiguous command:\t"%s"\n' % cmd)
			else:
				self.echo ('% Unrecognized command\n')

		def echo (self, msg):
			sys.stdout.write (msg)

		def emptyline (self):
			pass

		def do_help (self, arg):
			doc_strings = [ (i[3:], getattr (self, i).__doc__)
				for i in dir(self) if i.startswith ('do_') ]
			doc_strings = [ '  %s\t%s\n' % (i, j)
				for i, j in doc_strings if j is not None ]
			self.echo ('Commands:\n%s\n' % ''.join (doc_strings))

		def precmd (self, line):
			if line.strip () == 'help':
				self.echo ('%s\n' % self.__doc__)
				return ''

			cmd, arg, line = self.parseline (line)
			if arg == '?':
				cmds = self.completenames (cmd)
				if cmds:
					self.columnize (cmds)
					self.echo ('\n')
				return ''
			return line

		def query (self, query):
			self.echo (query)
			return stdin.readline().strip()
snippet '''
	'''${1}'''
	${2}
snippet sinit
	def __init__(self, *args, **kwargs):
		${1}.__init__(self, *args, **kwargs)
	${2}
snippet popen
	def popen(cmd, *args):
		'''
		Wraps subprocess output in an object.
		'''
		from subprocess import call, PIPE, Popen, STDOUT
		import shlex
		if isinstance(cmd, str):
			cmd = tuple(shlex.split(cmd))

		if len(args) is 1:
			args = tuple(shlex.split(args[0]),)

		cmd = cmd + args
		run = Popen(cmd, stdout=PIPE, stderr=PIPE)
		stdout, stderr = run.communicate()
		returncode = run.returncode

		class Command(object):
			def __init__(self, stdout, stderr, returncode):
				self.stdout = stdout.strip()
				self.stderr = stderr.strip()
				self.returncode = returncode

			def __str__(self):
				return self.stdout

		return Command(stdout, stderr, returncode)
snippet call
	def call(cmd, *args):
		pass
snippet telnet
	try:
		import telnetlib
		tn = telnetlib.Telnet(${1:ipaddr}, ${2:port})
	except socket.error:
		$3
snippet clog
	def logger(self, level, msg):
			getattr(logging, level)('%s: %s' % (self.name or self.__class__.__name__, msg))
snippet timer
	def uptimer(self, timeout=0):
		start = time()
		timeout = (timeout or self.timeout)
		timer_timeout = (start + timeout)

		while time() <= timer_timeout:
			sleep(1)
snippet stree
	def str2dict(text, value_split='=', branch_split='.'):
		tree = {}
		if isinstance(text, str):
			text = text.splitlines()

		for line in text:
			a = b = tree
			key, value = line.split(value_split, 2)
			val = val.strip()
			for node in key.split()[0].split(branch_split):
				a = b
				if node not in a:
					a[node] = {}
				b = a[node]
			a[node] = val
		return tree
snippet mainopts
	import optparse
	progname = os.path.basename(sys.argv[0])
	parser = optparse.OptionParser(
			description="",
			usage="%prog [options]",
			version="%prog: $Id$")
	parser.add_option('-f', '--logfile', action="store",
			dest='logfile', default='/var/log/%s' % progname,
			help="A file path to write logging output to")
	parser.add_option('-L', '--loglevel', action="store",
			dest="loglevel", default="INFO",
			help="The default logging level to print. "
				"The default is %default")
	(opts, args) = parser.parse_args()
	opts.loglevel = getattr(logging, opts.loglevel.upper())
	logopts = {'level': opts.loglevel,
			'format': "%(asctime)-15s::%(levelname)s:%(name)s: %(message)s"}
	logging.basicConfig(**logopts)
	log = logging.getLogger('main')

