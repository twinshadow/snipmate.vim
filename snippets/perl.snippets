# Script header
snippet #!
	#!/usr/bin/env perl
	use strict;
	use warnings;
	${1}
# Script header w/ Taint checks
snippet #!t
	#!/usr/bin/env perl -Tw
	use strict;
	use warnings;
	${1}
# Moose Class Template
snippet moose
	package ${1:ClassName}
	use Moose;

	${2}

	__PACKAGE__->meta->make_immutable;
# Package
snippet cl
	package ${1:ClassName};
	use strict;
	use warnings;
	use parent qw(${2:ParentClass});

	sub new {
		my $class = shift;
		my $self = bless ({}, $class);
		return $self;
	}

	${3}

	1;
# sub new {...
snippet new
	sub new {
		my $class = shift;
		my $self = bless ({}, $class);
		return $self;
	}
# sub new && process args
snippet xnew
	sub new {
		my $class = shift;
		my $self = bless ({}, $class);

		my %args = @_;
		for my $key ( keys %args ) { $self->$key( $args{ $key } ) }

		return $self;
	}
# Moose Accessors
snippet has
	has ${1:attribute} => { is => '${2:ro}', ${3}};${4}
# Hash Pointer
snippet .
	 => ${1}
# Function
snippet sub
	sub ${1:function_name} ${2:prototype} {
		${3:#body ...}
	}
# Conditional
snippet if
	if (${1}) {
		${2:# body...}
	}
# Conditional if..else
snippet ife
	if (${1}) {
		${2:# body...}
	}
	else {
		${3:# else...}
	}
# Conditional if..elsif..else
snippet ifee
	if (${1}) {
		${2:# body...}
	}
	elsif (${3}) {
		${4:# elsif...}
	}
	else {
		${5:# else...}
	}
# Conditional elseif
snippet elsif
	elsif (${1}) {
		${2:# elsif...}
	}
# Conditional One-line
snippet xif
	${1:expression} if ${2:condition};${3}
# Unless conditional
snippet unless
	unless (${1}) {
		${2:# body...}
	}
# Unless conditional One-line
snippet xunless
	${1:expression} unless ${2:condition};${3}
# Switch/Case P6-style
snippet given
	given (${1}) {
		${2}
	}
# Case P6-style
snippet when
	when (${1}) {
		${2:# caught...}
	}
# Default P6-style
snippet def
	default {
		${1:# default...}
	}
# Try/Except
snippet eval
	eval {
		${1:# do something risky...}
	};
	if ($@) {
		${2:# handle failure...}
	}
# While Loop
snippet wh
	while (${1}) {
		${2:# body...}
	}
# While Loop One-line
snippet xwh
	${1:expression} while ${2:condition};${3}
# C-style For Loop
snippet cfor
	for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4:# body...}
	}
# For loop one-line
snippet xfor
	${1:expression} for ${2:array};${3}
# Foreach Loop
snippet for
	for my $${1:x} (${2:array}) {
		${3:# body...}
	}
# Foreach When loop
snippet forw
	for (${1:array}) {
		when (${2:# condition...}) {
			${3:# caught...}
		}
	}
# Read File
snippet slurp
	my $${1:var} = do { local $/; open (my $file, '<', "${2:file}") or die "Can't open ${2:file}e: $!"; <$file> };
	${3}
# Key walk
snippet keywalk
	foreach (keys (${1:hash})) {
		${2}
	}
# Data::Dumper one-liner
snippet dump
	require Data::Dumper;print Data::Dumper::Dumper(${1});die;
